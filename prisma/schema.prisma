generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id                 String     @id @default(uuid())
  name               String?
  email              String     @unique
  password           String
  image              String?
  emailVerified      DateTime?
  createdAt          DateTime   @default(now())
  updatedAt          DateTime   @updatedAt
  accounts           Account[]
  sessions           Session[]
  activities         Activity[]
  projects           Project[]  @relation(name: "MyProject")
  collabotedProjects Project[]  @relation(name: "ContributedProjects")
}

model Account {
  id                String  @id @default(uuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Session {
  id           String   @id @default(uuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String   @id
  token      String   @unique
  expires    DateTime
}

model Project {
  id            String    @id @default(uuid())
  userId        String
  title         String
  description   String?
  token         String?
  url           String
  isSpa         Boolean?  @default(false)
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  collaborators User[]    @relation(name: "ContributedProjects")
  user          User      @relation(name: "MyProject", fields: [userId], references: [id], onDelete: Cascade)
  requests      Request[]
}

model Request {
  id        String   @id @default(uuid())
  ip        String?
  agent     String?
  projectId String
  user      Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Activity {
  id        String   @id @default(uuid())
  userId    String
  action    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}
